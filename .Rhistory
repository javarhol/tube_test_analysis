tube_test_outcomes <- read.csv("/data/tube_test_outcomes.csv")
tube_test_outcomes <- read.csv("data/tube_test_outcomes.csv")
View(tube_test_outcomes)
?read.csv()
tube_test_outcomes <- read.csv("data/tube_test_outcomes.csv", blank.lines.skip = TRUE)
View(tube_test_outcomes)
tube_test_outcomes <- read.csv("data/tube_test_outcomes.csv", nrows=546)
View(tube_test_outcomes)
head(tube_test_outcomes)
#filter data
tube_test_outcomes <- tube_test_outcomes %>%
select(test_day,cage_id, opponent_1, opponent_2, t1, t2, t3, t4) %>%
within(day_id <- paste(cage_id, test_day, sep = "-")) %>%
select(opponent_1, opponent_2, t1, t2, t3, t4, day_id, cage_id)
library(xlsx)
library(dplyr)
library(tidyr)
library(compete) #devtools::install_github('jalapic/compete')
#custom scripts modified from the 'compete' package https://github.com/jalapic/compete
getMinRank <- function(x){
matrix <- get_wl_matrix(x, ties="keep")
Wins <- rowSums(matrix)
TotalWins <- as.data.frame(Wins)
TotalWins$ID <- rownames(TotalWins)
TotalWins <- mutate(TotalWins, rank = rank(-Wins, ties.method="min"))
TotalWins <- select(TotalWins, ID, Wins, rank)
return(TotalWins)
}
Landau <- function(x){
matrix <- get_wl_matrix(x, ties="remove")
devriesmod(matrix)
}
#filter data
tube_test_outcomes <- tube_test_outcomes %>%
select(test_day,cage_id, opponent_1, opponent_2, t1, t2, t3, t4) %>%
within(day_id <- paste(cage_id, test_day, sep = "-")) %>%
select(opponent_1, opponent_2, t1, t2, t3, t4, day_id, cage_id)
View(tube_test_outcomes)
#rename opponent data to animal_id
tube_test_outcomes$opponent_1 <- paste(tube_test_outcomes$cage_id, tube_test_outcomes$opponent_1, sep="-")
tube_test_outcomes$opponent_2 <- paste(tube_test_outcomes$cage_id, tube_test_outcomes$opponent_2, sep="-")
View(tube_test_outcomes)
#make a long dataset
long_data <- data.frame(tube_test_outcomes[1:2], tube_test_outcomes[7:8], stack(tube_test_outcomes[3:6]))
long_data <- long_data[,c("opponent_1", "opponent_2", "values", "ind", "day_id", "cage_id")]
View(long_data)
#split up long_data by day_id
df_list <- split(long_data, as.factor(long_data$day_id))
#splitup long_dat by Cage (compound all 3 weeks)
df_list2 <- split(long_data, as.factor(long_data$cage_id))
View(df_list)
#split up long_data by day_id
day_list <- split(long_data, as.factor(long_data$day_id))
#splitup long_dat by Cage (compound all 3 weeks)
cage_list2 <- split(long_data, as.factor(long_data$cage_id))
rm(df_list)
rm(df_list2)
#get minimum Ranks (go back and manually assess ties)
#each day
ranks_per_week <- do.call(rbind, lapply(day_list, getMinRank))
write.csv(ranks_per_week, "data/ranks_per_week.csv")
#each cage
ranks_per_cage <- do.call(rbind, lapply(cage_list, getMinRank))
#splitup long_dat by Cage (compound all 3 weeks)
cage_list <- split(long_data, as.factor(long_data$cage_id))
#each cage
ranks_per_cage <- do.call(rbind, lapply(cage_list, getMinRank))
write.csv(ranks_per_cage, "data/ranks_per_cage.csv")
View(ranks_per_cage)
View(ranks_per_week)
View(cage_list)
#import data
tube_test_outcomes <- read.csv("data/tube_test_outcomes.csv", nrows=546)
#filter data
tube_test_outcomes <- tube_test_outcomes %>%
select(test_day,cage_id, opponent_1, opponent_2, t1, t2, t3, t4) %>%
within(cage_day <- paste(cage_id, test_day, sep = "-")) %>%
select(opponent_1, opponent_2, t1, t2, t3, t4, cage_day, cage_id)
#rename opponent data to animal_id
tube_test_outcomes$opponent_1 <- paste(tube_test_outcomes$cage_id, tube_test_outcomes$opponent_1, sep="-")
tube_test_outcomes$opponent_2 <- paste(tube_test_outcomes$cage_id, tube_test_outcomes$opponent_2, sep="-")
#make a long dataset
long_data <- data.frame(tube_test_outcomes[1:2], tube_test_outcomes[7:8], stack(tube_test_outcomes[3:6]))
long_data <- long_data[,c("opponent_1", "opponent_2", "values", "ind", "cage_day", "cage_id")]
#split up long_data by day_id
day_list <- split(long_data, as.factor(long_data$cage_day))
#splitup long_dat by Cage (compound all 3 weeks)
cage_list <- split(long_data, as.factor(long_data$cage_id))
#get minimum Ranks (go back and manually assess ties)
#each day
ranks_per_week <- do.call(rbind, lapply(day_list, getMinRank))
write.csv(ranks_per_week, "data/ranks_per_week.csv")
#each cage
ranks_per_cage <- do.call(rbind, lapply(cage_list, getMinRank))
write.csv(ranks_per_cage, "data/ranks_per_cage.csv")
View(ranks_per_week)
View(tube_test_outcomes)
View(long_data)
View(day_list)
View(cage_list)
View(ranks_per_cage)
#custom scripts modified from the 'compete' package https://github.com/jalapic/compete
getMinRank <- function(x){
matrix <- get_wl_matrix(x, ties="keep")
wins <- rowSums(matrix)
total_wins <- as.data.frame(wins)
total_wins$cage_day <- rownames(total_wins)
total_wins <- mutate(total_wins, rank = rank(-wins, ties.method="min"))
total_wins <- select(total_wins, cage_day, wins, rank)
return(total_wins)
}
#get minimum Ranks (go back and manually assess ties)
#each day
ranks_per_week <- do.call(rbind, lapply(day_list, getMinRank))
write.csv(ranks_per_week, "data/ranks_per_week.csv")
#each cage
ranks_per_cage <- do.call(rbind, lapply(cage_list, getMinRank))
write.csv(ranks_per_cage, "data/ranks_per_cage.csv")
View(ranks_per_week)
View(ranks_per_cage)
View(ranks_per_week)
View(ranks_per_cage)
#custom scripts modified from the 'compete' package https://github.com/jalapic/compete
getMinRank <- function(x){
matrix <- get_wl_matrix(x, ties="keep")
wins <- rowSums(matrix)
total_wins <- as.data.frame(wins)
total_wins$id <- rownames(total_wins)
total_wins <- mutate(total_wins, rank = rank(-wins, ties.method="min"))
total_wins <- select(total_wins, id, wins, rank)
return(total_wins)
}
#get minimum Ranks (go back and manually assess ties)
#each day
ranks_per_week <- do.call(rbind, lapply(day_list, getMinRank))
write.csv(ranks_per_week, "data/ranks_per_week.csv")
#each cage
ranks_per_cage <- do.call(rbind, lapply(cage_list, getMinRank))
write.csv(ranks_per_cage, "data/ranks_per_cage.csv")
View(ranks_per_week)
View(ranks_per_cage)
#each day
landau_per_week <- do.call(rbind, lapply(day_list, Landau))
Landau <- function(x){
matrix <- get_wl_matrix(x, ties="remove")
devries(matrix)
}
#each day
landau_per_week <- do.call(rbind, lapply(day_list, Landau))
View(landau_per_week)
devriesmod <- function(i) {
# ensure matrix form
m <- as.matrix(i)
# replace NA values in diagonal with 0
# compute total "encounters" (as sum of matrix with transpose)
total <- m + t(m)
# requires igraph
g <- igraph::graph.adjacency(m, mode="directed", weighted=TRUE, diag=FALSE)
# get number of rows (and columns)
N <- nrow(m)
NN <- N * N
# store adjacency degree in d
d <- igraph::degree(g, mode="out")
# compute point-estimate of h
hF1 <- (12 / ((N ^ 3) - N))
hF2 <- (N - 1) / 2
h <- hF1 * sum((d - hF2) ^ 2)
# prepare arrays
h0 <- vector(length=10000)
hr <- vector(length=10000)
# pre-compute matrices with fixed and random elements
fixedels <- ((total > 0) + 0.0)
randomels <- 1 - fixedels
diag(randomels) <- 0
# for fixed elements, the result is
fixedvals <- fixedels * (0.5 * (((m > t(m)) + 0.0) - ((t(m) > m) + 0.0) + 1))
# iterate over cases
for (k in 1:10000){
# compute new matrix
randmat <- matrix(runif(NN), ncol=N)
newmat <- fixedvals + randomels * ((randmat > t(randmat)) + 0.0)
# compute sum over rows
V <- rowSums(newmat)
# apply formula
h0[k] <- hF1 * sum((V - hF2) ^ 2)
# compare with fully random matrix
randmat <- matrix(runif(NN), ncol=N)
nm <- (randmat > t(randmat)) + 0.0
#diag(nm) = 0
Vr <- rowSums(nm)
hr[k] <- hF1 * sum((Vr - hF2) ^ 2)
}
# final computation
t <- sum((hr >= h0) + 0.0)
hmod <- mean(h0)
p <- t / 10000
return(hmod)
#return(cat(" Landau's h= ",h,"\n","modified Landau's h= ",hmod,"\n","p-value from simulations= ",p))
}
Landau <- function(x){
matrix <- get_wl_matrix(x, ties="remove")
devriesmod(matrix)
}
#each day
landau_per_week1 <- do.call(rbind, lapply(day_list, Landau))
#each day
landau_per_week1 <- do.call(rbind, lapply(day_list, Landau))
View(landau_per_week1)
#each cage
landau_per_cage1 <- do.call(rbind, lapply(cage_list, Landau))
View(ranks_per_week)
View(ranks_per_week)
#import data
tube_test_outcomes <- read.csv("data/tube_test_outcomes.csv", nrows=546)
#filter data
tube_test_outcomes <- tube_test_outcomes %>%
select(test_day,cage_id, opponent_1, opponent_2, t1, t2, t3, t4) %>%
within(cage_day <- paste(cage_id, test_day, sep = "-d")) %>%
select(opponent_1, opponent_2, t1, t2, t3, t4, cage_day, cage_id)
#rename opponent data to animal_id
tube_test_outcomes$opponent_1 <- paste(tube_test_outcomes$cage_id, tube_test_outcomes$opponent_1, sep="-")
tube_test_outcomes$opponent_2 <- paste(tube_test_outcomes$cage_id, tube_test_outcomes$opponent_2, sep="-")
#make a long dataset
long_data <- data.frame(tube_test_outcomes[1:2], tube_test_outcomes[7:8], stack(tube_test_outcomes[3:6]))
long_data <- long_data[,c("opponent_1", "opponent_2", "values", "ind", "cage_day", "cage_id")]
#split up long_data by day_id
day_list <- split(long_data, as.factor(long_data$cage_day))
#splitup long_dat by Cage (compound all 3 weeks)
cage_list <- split(long_data, as.factor(long_data$cage_id))
#get minimum Ranks (go back and manually assess cage-mates with the same rank)
#each day
ranks_per_week <- do.call(rbind, lapply(day_list, getMinRank))
write.csv(ranks_per_week, "data/ranks_per_week.csv")
#each cage
ranks_per_cage <- do.call(rbind, lapply(cage_list, getMinRank))
write.csv(ranks_per_cage, "data/ranks_per_cage.csv")
View(ranks_per_week)
View(ranks_per_cage)
View(ranks_per_week)
View(long_data)
View(ranks_per_week)
ranks_per_week <- ranks_per_week %>%
mutate(cage_day = rownames(.))
View(ranks_per_week)
#get minimum Ranks (go back and manually assess cage-mates with the same rank)
#each day
ranks_per_week <- do.call(rbind, lapply(day_list, getMinRank))
ranks_per_week <- ranks_per_week %>%
mutate(cage_day = rownames(.)) %>%
separate(cage_day, animal_id, sep = ".")
?separate()
ranks_per_week <- ranks_per_week %>%
mutate(cage_day = rownames(.)) %>%
separate_wider_delim(cage_day, delim = ".")
ranks_per_week <- ranks_per_week %>%
mutate(cage_day = rownames(.)) %>%
separate_wider_delim(cage_day, delim = ".", names = c("cage_day", "animal_id"))
View(ranks_per_week)
#get minimum Ranks (go back and manually assess cage-mates with the same rank)
#each day
ranks_per_week <- do.call(rbind, lapply(day_list, getMinRank))
ranks_per_week <- ranks_per_week %>%
mutate(cage_day = rownames(.)) %>%
separate_wider_delim(cage_day, delim = ".", names = c("cage_day", "animal_id")) %>%
select(animal_id, cage_day, wins, rank)
View(ranks_per_week)
#get minimum Ranks (go back and manually assess cage-mates with the same rank)
#each day
ranks_per_week <- do.call(rbind, lapply(day_list, getMinRank))
ranks_per_week <- ranks_per_week %>%
mutate(cage_day = rownames(.)) %>%
separate_wider_delim(cage_day, delim = ".", names = c("cage_day", "animal_id")) %>%
separate_wider_delim(cage_day, delim = "-", names = c("cage_id", "day")) %>%
select(cage_id, animal_id, day, wins, rank)
write.csv(ranks_per_week, "data/ranks_per_week.csv")
View(ranks_per_cage)
ranks_per_cage <- ranks_per_cage %>%
mutate(tempid = rownames(.)) %>%
separate_wider_delim(tempid, delim = ".", names = c("cage_id", "animal_id")) %>%
select(cage_id, animal_id, wins, rank)
View(ranks_per_cage)
write.csv(ranks_per_cage, "data/ranks_per_cage.csv")
#import animal inventory to add sex to datasets
animal_inventory <- read.csv("data/animal_inventory.csv")
View(animal_inventory)
sex_id <- select(animal_inventory, animal_id, sex)
View(sex_id)
ranks_per_week <- left_join(ranks_per_week, sex_id, by = "animal_id")
View(ranks_per_week)
View(ranks_per_week)
ranks_week3 <- ranks_per_week %>%
filter(day == "d3") %>%
mutate(rank3 == rank) %>%
select(animal_id, rank3)
?rename()
ranks_week3 <- ranks_per_week %>%
filter(day == "d3") %>%
rename(rank3 = rank) %>%
select(animal_id, rank3)
View(ranks_week3)
ranks_per_week <- left_join(ranks_per_week, ranks_week3, by = "animal_id")
head(ranks_per_week)
males <- filter(ranks_per_week, sex == "Male")
females <- filter(ranks_per_week, sex == "Female")
ggplot(males, aes(day, rank, group = animal_id, color = as.factor(rank3), label = animal_id)) +
geom_line(size = 1.5, aes(y=jitter(values, .5)))
#packages
library(ggplot2)
library(cowplot)
ggplot(males, aes(day, rank, group = animal_id, color = as.factor(rank3), label = animal_id)) +
geom_line(size = 1.5, aes(y=jitter(values, .5)))
ggplot(males, aes(day, rank, group = animal_id, color = as.factor(rank3), label = animal_id)) +
geom_line(size = 1.5, aes(y=jitter(rank, .5)))
ggplot(males, aes(day, rank, group = animal_id, color = as.factor(rank3), label = animal_id)) +
geom_line(size = 1.5, aes(y=jitter(rank, .5))) +
scale_x_discrete(labels = c("d1" = 1, "d2" = 2, "d3" = 3), expand = c(0,0)) +
scale_y_reverse(breaks = c(1,2,3,4,5), labels = c("Alpha", "Beta", "Gamma", "Delta", "Episolon"), expand = c(0,0))
ggplot(males, aes(day, rank, group = animal_id, color = as.factor(rank3), label = animal_id)) +
geom_line(size = 1.5, aes(y=jitter(rank, .5))) +
scale_x_discrete(labels = c("d1" = 1, "d2" = 2, "d3" = 3), expand = c(0,0)) +
scale_y_reverse(breaks = c(1,2,3,4,5), labels = c("Alpha", "Beta", "Gamma", "Delta", "Episolon"), expand = c(0,0)) +
scale_color_viridis_d() +
xlab("Week") + ylab("")
ggplot(males, aes(day, rank, group = animal_id, color = as.factor(rank3), label = animal_id)) +
geom_line(size = 1.5, aes(y=jitter(rank, .5))) +
scale_x_discrete(labels = c("d1" = 1, "d2" = 2, "d3" = 3), expand = c(0,0)) +
scale_y_reverse(breaks = c(1,2,3,4,5), labels = c("Alpha", "Beta", "Gamma", "Delta", "Epsilon"), expand = c(0,0)) +
scale_color_viridis_d() +
xlab("Week") + ylab("") +
cowplot()
ggplot(males, aes(day, rank, group = animal_id, color = as.factor(rank3), label = animal_id)) +
geom_line(size = 1.5, aes(y=jitter(rank, .5))) +
scale_x_discrete(labels = c("d1" = 1, "d2" = 2, "d3" = 3), expand = c(0,0)) +
scale_y_reverse(breaks = c(1,2,3,4,5), labels = c("Alpha", "Beta", "Gamma", "Delta", "Epsilon"), expand = c(0,0)) +
scale_color_viridis_d() +
xlab("Week") + ylab("") +
theme_cowplot()
ggplot(males, aes(day, rank, group = animal_id, color = as.factor(rank3), label = animal_id)) +
geom_line(size = 1.5, aes(y=jitter(rank, .5))) +
scale_x_discrete(labels = c("d1" = 1, "d2" = 2, "d3" = 3), expand = c(0,0)) +
scale_y_reverse(breaks = c(1,2,3,4,5), labels = c("Alpha", "Beta", "Gamma", "Delta", "Epsilon"), expand = c(0,0)) +
scale_color_viridis_d() + guides(colour=FALSE) +
xlab("Week") + ylab("") +
theme_cowplot()
ggplot(males, aes(day, rank, group = animal_id, color = as.factor(rank3), label = animal_id)) +
geom_line(size = 1.5, aes(y=jitter(rank, .5))) +
scale_x_discrete(labels = c("d1" = 1, "d2" = 2, "d3" = 3), expand = c(0,0)) +
scale_y_reverse(breaks = c(1,2,3,4,5), labels = c("Alpha", "Beta", "Gamma", "Delta", "Epsilon"), expand = c(0,0)) +
scale_color_viridis_d() + guides(colour="none") +
ggtitle("Males") +
xlab("Week") + ylab("") +
theme_cowplot()
ggplot(females, aes(day, rank, group = animal_id, color = as.factor(rank3), label = animal_id)) +
geom_line(size = 1.5, aes(y=jitter(rank, .5))) +
scale_x_discrete(labels = c("d1" = 1, "d2" = 2, "d3" = 3), expand = c(0,0)) +
scale_y_reverse(breaks = c(1,2,3,4,5), labels = c("Alpha", "Beta", "Gamma", "Delta", "Epsilon"), expand = c(0,0)) +
scale_color_viridis_d() + guides(colour="none") +
ggtitle("Females") +
xlab("Week") + ylab("") +
theme_cowplot()
View(ranks_per_week)
View(ranks_per_cage)
cage_rank <- ranks_per_cage %>%
select(animal_id, rank) %>%
rename(cage_rank = rank)
View(cage_rank)
ranks_per_week <- left_join(ranks_per_week, cage_rank, by = "animal_id")
ggplot(males, aes(day, rank, group = animal_id, color = as.factor(cage_rank), label = animal_id)) +
geom_line(size = 1.5, aes(y=jitter(rank, .5))) +
scale_x_discrete(labels = c("d1" = 1, "d2" = 2, "d3" = 3), expand = c(0,0)) +
scale_y_reverse(breaks = c(1,2,3,4,5), labels = c("Alpha", "Beta", "Gamma", "Delta", "Epsilon"), expand = c(0,0)) +
scale_color_viridis_d() + guides(colour="none") +
ggtitle("Males") +
xlab("Week") + ylab("") +
theme_cowplot()
males <- filter(ranks_per_week, sex == "Male")
females <- filter(ranks_per_week, sex == "Female")
ggplot(males, aes(day, rank, group = animal_id, color = as.factor(cage_rank), label = animal_id)) +
geom_line(size = 1.5, aes(y=jitter(rank, .5))) +
scale_x_discrete(labels = c("d1" = 1, "d2" = 2, "d3" = 3), expand = c(0,0)) +
scale_y_reverse(breaks = c(1,2,3,4,5), labels = c("Alpha", "Beta", "Gamma", "Delta", "Epsilon"), expand = c(0,0)) +
scale_color_viridis_d() + guides(colour="none") +
ggtitle("Males") +
xlab("Week") + ylab("") +
theme_cowplot()
ggplot(females, aes(day, rank, group = animal_id, color = as.factor(cage_rank), label = animal_id)) +
geom_line(size = 1.5, aes(y=jitter(rank, .5))) +
scale_x_discrete(labels = c("d1" = 1, "d2" = 2, "d3" = 3), expand = c(0,0)) +
scale_y_reverse(breaks = c(1,2,3,4,5), labels = c("Alpha", "Beta", "Gamma", "Delta", "Epsilon"), expand = c(0,0)) +
scale_color_viridis_d() + guides(colour="none") +
ggtitle("Females") +
xlab("Week") + ylab("") +
theme_cowplot()
View(ranks_per_week)
?pivot_wider()
head(ranks_per_week)
stability <- ranks_per_week %>%
pivot_wider(names_from = day, values_from = rank)
View(stability)
stability <- ranks_per_week %>%
select(cage_id, animal_id, sex, cage_rank, day, rank) %>%
pivot_wider(names_from = day, values_from = rank)
View(stability)
stability <- ranks_per_week %>%
select(cage_id, animal_id, sex, cage_rank, day, rank) %>%
pivot_wider(names_from = day, values_from = rank) %>%
case_when(
d1 == d2 == d3, stability = "stable",
stability <- ranks_per_week %>%
select(cage_id, animal_id, sex, cage_rank, day, rank) %>%
pivot_wider(names_from = day, values_from = rank) %>%
case_when(
d1 == d2 & d2 == d3 ~ stability = "stable",
stability <- ranks_per_week %>%
select(cage_id, animal_id, sex, cage_rank, day, rank) %>%
pivot_wider(names_from = day, values_from = rank) %>%
mutate(stability = case_when(
d1 == d2 & d2 == d3 ~ "stable",
"unstable"
))
stability <- ranks_per_week %>%
select(cage_id, animal_id, sex, cage_rank, day, rank) %>%
pivot_wider(names_from = day, values_from = rank) %>%
mutate(stability = case_when(
d1 == d2 & d2 == d3 ~ "stable",
d1 != d2, "unstable"
))
stability <- ranks_per_week %>%
select(cage_id, animal_id, sex, cage_rank, day, rank) %>%
pivot_wider(names_from = day, values_from = rank) %>%
mutate(stability = case_when(
d1 == d2 & d2 == d3 ~ "stable",
d1 != d2 ~ "unstable"
))
View(stability)
stability <- ranks_per_week %>%
select(cage_id, animal_id, sex, cage_rank, day, rank) %>%
pivot_wider(names_from = day, values_from = rank) %>%
mutate(stability = case_when(
d1 == d2 & d2 == d3 ~ "stable",
d1 != d2 ~ "unstable",
d1 != d3 ~ "unstable",
d2 != d3 ~ "unstable"
))
stability <- ranks_per_week %>%
select(cage_id, animal_id, sex, cage_rank, day, rank) %>%
pivot_wider(names_from = day, values_from = rank) %>%
mutate(stability = case_when(
d1 == d2 & d2 == d3 ~ "stable",
d1 != d2 ~ "unstable",
d1 != d3 ~ "unstable",
d2 != d3 ~ "unstable"
)) %>%
filter(stability == "stable")
View(stability)
males <- filter(stability, sex == "Males")
females <- filter(stability, sex == "Females")
head(males)
males <- filter(stability, sex == "Male")
females <- filter(stability, sex == "Female")
head(males)
ggplot(males, aes(cage_rank)) +
geom_hist()
males <- stability %>%
filter(sex == "Male") %>%
group_by(cage_rank) %>%
summarise(count = n(stability))
males <- stability %>%
filter(sex == "Male") %>%
group_by(cage_rank) %>%
summarise(count = n())
View(males)
females <- stability %>%
filter(sex == "Female") %>%
group_by(cage_rank) %>%
summarise(count = n())
View(males)
ggplot(males, aes(cage_rank, count)) +
geom_bar()
males <- stability %>%
filter(sex == "Male")
ggplot(males, aes(cage_rank, count)) +
geom_bar()
ggplot(males, aes(cage_rank)) +
geom_bar()
